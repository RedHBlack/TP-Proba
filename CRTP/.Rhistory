print(seeds)
print(seeds[,1])
library(randtoolbox)
source('generateurs.R')
Nsimu <- 100
Nrepet <- 20
print(seeds[,1])
library(randtoolbox)
source('generateurs.R')
Nsimu <- 100
Nrepet <- 20
sMT <- 1502
mt <- MersenneTwister(Nsimu,Nrepet,sMT)
hist(mt[,1],breaks = 20,xlab='',main='',col = "red")
plot(mt[1:(Nsimu-1),1],mt[2:Nsimu,1],xlab='MT(i)', ylab='MT(i+1)', main='',col = "red")
sRN <- 5645
rn <- RANDU(Nsimu,Nrepet,sRN)
hist(rn[,1],breaks = 20,xlab='',main='',col = "green")
plot(rn[1:(Nsimu-1),1],rn[2:Nsimu,1],xlab='RN(i)', ylab='RN(i+1)', main='',col="green")
sSM <- 9575
sm <- StandardMinimal(Nsimu,Nrepet,sSM)
hist(sm[,1],breaks = 20,xlab='',main='Standard Minimal',col = "blue")
plot(sm[1:(Nsimu-1),1],sm[2:Nsimu,1],xlab='SM(i)', ylab='SM(i+1)', main='Standard Minimal',col="blue")
sVN <- 3454
vn <- VonNeumann(Nsimu,Nrepet,sVN)
hist(vn[,1],breaks = 20,xlab='',main='',xlim = c(0,9999),col = "pink")
plot(vn[1:(Nsimu-1),1],vn[2:Nsimu,1],xlab='VN(i)', ylab='VN(i+1)', main='',xlim = c(0,9999),col="pink")
seeds <- MersenneTwister(Nsimu,Nrepet,4675)/2
a <- vector()
b <- vector()
c <- vector()
d <- vector()
for(i in 1:100){
a <- c(a,MersenneTwister(100,Nrepet,seeds[i])[,1])
b <- c(b,VonNeumann(100,Nrepet,seeds[i])[,1])
c <- c(c,RANDU(100,Nrepet,seeds[i])[,1])
d <- c(d,StandardMinimal(100,Nrepet,seeds[i])[,1])
}
hist(a,xlab = 'Nombre généré',breaks=20,main = '',xlim = c(0,2^32),col = 'red')
hist(b,xlab = 'Nombre généré',breaks=20,main = '',xlim = c(0,10000),col = 'green')
hist(c,xlab = 'Nombre généré',breaks=20,main = '',xlim = c(0,2^31),col = 'blue')
hist(d,xlab = 'Nombre généré',breaks=20,main = '',xlim = c(0,2^31),col = 'pink')
x <- vector()
y <- vector()
z <- vector()
t <- vector()
for(j in 1:100){
x <- c(x,Frequency(binary(a[j]),32))
y <- c(y,Frequency(binary(b[j]),32))
z <- c(z,Frequency(binary(c[j]),32))
t <- c(t,Frequency(binary(d[j]),32))
}
hist(x,xlab='',breaks=100,main = '',xlim = c(0,1),col = 'red')
hist(y,xlab='',breaks=100,main = '',xlim = c(0,0.015),col = 'green')
hist(z,xlab='',breaks=100,main = '',xlim = c(0,1),col = 'blue')
hist(t,xlab='',breaks=100,main = '',xlim = c(0,1),col = 'pink')
x <- vector()
y <- vector()
z <- vector()
t <- vector()
for(j in 1:100){
x <- c(x,Runs(binary(a[j]),32))
y <- c(y,Runs(binary(b[j]),32))
z <- c(z,Runs(binary(c[j]),32))
t <- c(t,Runs(binary(d[j]),32))
}
hist(x,xlab='',breaks=100,main = '',xlim = c(0,1),col = 'red')
hist(y,xlab='',breaks=100,main = '',xlim = c(0,1),col = 'green')
hist(z,xlab='',breaks=100,main = '',xlim = c(0,1),col = 'blue')
hist(t,xlab='',breaks=100,main = '',xlim = c(0,1),col = 'pink')
rTestMT <- vector()
rTestVN <- vector()
rTestRN <- vector()
rTestSM <- vector()
for(i in 1:100){
rTestMT <- c(rTestMT,order.test(a[(1+100*(i-1)):(100*i)],4,echo=FALSE)$p.value)
rTestVN <- c(rTestVN,order.test(b[(1+100*(i-1)):(100*i)],4,echo=FALSE)$p.value)
rTestRN <- c(rTestRN,order.test(c[(1+100*(i-1)):(100*i)],4,echo=FALSE)$p.value)
rTestSM <- c(rTestSM,order.test(d[(1+100*(i-1)):(100*i)],4,echo=FALSE)$p.value)
}
hist(rTestMT,xlab='',breaks=100,main = '',xlim = c(0,1),col = 'red')
hist(rTestVN,xlab='',breaks=100,main = '',xlim = c(0,1),col = 'green')
hist(rTestRN,xlab='',breaks=100,main = '',xlim = c(0,1),col = 'blue')
hist(rTestSM,xlab='',breaks=100,main = '',xlim = c(0,1),col = 'pink')
VonNeumann <- function(n, p=1, graine)
{
x <-  rep(graine,n*p+1)
for(i in 2:(n*p+1))
{
numbers <- strsplit(format(x[i-1]^2,scientific=FALSE),'')[[1]]
while(length(numbers)>4){
numbers <- numbers[2:(length(numbers)-1)]
}
x[i] <- as.numeric(numbers)%*%(10^seq(length(numbers)-1,0,-1))
}
x <- matrix(x[2:(n*p+1)],nrow=n,ncol=p)
return(x)
}
MersenneTwister <- function(n, p=1, graine)
{
set.seed(graine,kind='Mersenne-Twister')
x <- sample.int(2^32-1,n*p)
x <- matrix(x,nrow=n,ncol=p)
return(x)
}
RANDU <- function(n=1,k = 10,graine)
{
x <-  rep(graine,k*n+1)
for (i in 2:(k*n+1)) {
x[i] <- (65539*x[i-1])%%(2^31)
}
x <- matrix(x[2:(k*n+1)],nrow=n,ncol=k)
return(x)
}
StandardMinimal <- function(n=1,k = 10,graine)
{
x <-  rep(graine,k*n+1)
for (i in 2:(k*n+1)) {
x[i] <- (16807*x[i-1])%% (2^31-1)
}
x <- matrix(x[2:(k*n+1)],nrow=n,ncol=k)
return(x)
}
binary <- function(x)
{
if((x<2^31)&(x>=0))
return( as.integer(intToBits(as.integer(x))) )
else{
if((x<2^32)&(x>0))
return( c(binary(x-2^31)[1:31], 1) )
else{
cat('Erreur dans binary : le nombre etudie n est pas un entier positif en 32 bits.\n')
return(c())
}
}
}
print(seeds[,1])
Frequency <- function(x, nb)
{
for(i in 1:nb){
if(x[i]==0)
x[i] <- -1
}
S <- sum(x)
sObs <- abs(S)/sqrt(nb)
p <- 2*(1-pnorm(sObs,0,1))
return(p)
}
Runs <- function(x, nb)
{
#Pre-test
S <- 0
for(i in 1:nb){
if(x[i]==1)
S <- S+1
}
pi <- S/nb
if(abs(pi-1/2)>=(2/sqrt(nb))){
return(0.0)
}
#Test
VnObs <- 0
for(i in 2:nb-1){
if(x[i+1]!=x[i])
VnObs <- VnObs + 1
}
VnObs <- VnObs + 1
frac <- (abs(VnObs-2*nb*pi*(1-pi))/(2*sqrt(nb)*pi*(1-pi)))
P <- 2*(1-pnorm(frac,0,1))
return(P)
}
print(seeds[,1],width = 10)
print(seeds[,1],max = 10)
print(seeds[,1],max = 100)
print(seeds[,1])
print(seeds[,1])
print(seeds[,1])
print(seeds[,1])
print(seeds[,1])
print(seeds[,1])
print(seeds[1,1])
print(seeds[1,2])
print(seeds[1,9])
print(seeds[,9])
print(seeds[1,9])
print(seeds[1,])
print(seeds[,1])
seeds <- MersenneTwister(Nsimu,Nrepet,4675)/2
a <- vector()
b <- vector()
c <- vector()
d <- vector()
for(i in 1:100){
a <- c(a,MersenneTwister(1000000,Nrepet,seeds[i])[,1])
b <- c(b,VonNeumann(1000000,Nrepet,seeds[i])[,1])
c <- c(c,RANDU(1000000,Nrepet,seeds[i])[,1])
d <- c(d,StandardMinimal(1000000,Nrepet,seeds[i])[,1])
}
hist(a,xlab = 'Nombre généré',breaks=20,main = '',xlim = c(0,2^32),col = 'red')
hist(b,xlab = 'Nombre généré',breaks=20,main = '',xlim = c(0,10000),col = 'green')
seeds <- MersenneTwister(Nsimu,Nrepet,4675)/2
a <- vector()
b <- vector()
c <- vector()
d <- vector()
for(i in 1:100){
a <- c(a,MersenneTwister(100,Nrepet,seeds[i])[,1])
b <- c(b,VonNeumann(100,Nrepet,seeds[i])[,1])
c <- c(c,RANDU(100,Nrepet,seeds[i])[,1])
d <- c(d,StandardMinimal(100,Nrepet,seeds[i])[,1])
}
hist(a,xlab = 'Nombre généré',breaks=1000000,main = '',xlim = c(0,2^32),col = 'red')
hist(b,xlab = 'Nombre généré',breaks=1000000,main = '',xlim = c(0,10000),col = 'green')
hist(c,xlab = 'Nombre généré',breaks=1000000,main = '',xlim = c(0,2^31),col = 'blue')
hist(d,xlab = 'Nombre généré',breaks=1000000,main = '',xlim = c(0,2^31),col = 'pink')
